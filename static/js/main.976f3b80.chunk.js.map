{"version":3,"sources":["SimpleCalendarFunc.js","App.js","serviceWorker.js","index.js"],"names":["Calendar","useState","Date","currentMonth","setCurrentMonth","format","selectedDate","setSelectedDate","onDateClick","day","clickedDate","prevDates","indexOf","filter","d","ls","set","nextMonth","currMonth","addMonths","prevMonth","subMonths","useEffect","get","className","onClick","days","startDate","startOfWeek","i","push","key","addDays","renderDays","monthStart","startOfMonth","monthEnd","endOfMonth","endDate","endOfWeek","rows","formattedDate","cloneDay","isSameMonth","console","log","renderCells","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iWAyIeA,MArIf,WAAqB,IAAD,EACwBC,mBAAS,IAAIC,MADrC,mBACTC,EADS,KACKC,EADL,OAEwBH,mBAAS,CAACI,YAAO,IAAIH,KAAQ,gBAFrD,mBAETI,EAFS,KAEKC,EAFL,KA+FlB,SAASC,EAAYC,GACnB,IAAIC,EAAcL,YAAOI,EAAK,cAC9BF,GAAgB,SAAAI,GAEZ,OADcA,EAAUC,QAAQF,GAClB,EACN,GAAN,mBAAWC,GAAX,CAAsBD,IAEf,YAAIC,GAAWE,QACpB,SAACC,GAAD,OAAOA,IAAMJ,QAIrBK,IAAGC,IAAI,eAAP,sBAA2BV,GAA3B,CAAyCI,KAG3C,SAASO,IACLb,GAAgB,SAAAc,GACd,OAAOC,YAAUD,EAAW,MAIlC,SAASE,IACPhB,GAAgB,SAAAc,GACd,OAAOG,YAAUH,EAAW,MAI9B,OAtHFI,qBAAU,WACRf,EACEQ,IAAGQ,IAAI,iBAAmB,CAAClB,YAAO,IAAIH,KAAQ,kBAEhD,IAmHE,yBAAKsB,UAAU,YA7Gf,yBAAKA,UAAU,0BACb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,OAAOC,QAASL,GAA/B,iBAIF,yBAAKI,UAAU,kBACb,8BAAOnB,YAAOF,EAVD,cAWb,gDAEF,yBAAKqB,UAAU,cAAcC,QAASR,GACpC,yBAAKO,UAAU,QAAf,mBAMR,WAME,IALA,IACME,EAAO,GAETC,EAAYC,YAAYzB,GAEnB0B,EAAI,EAAGA,EAAI,EAAGA,IACrBH,EAAKI,KACH,yBAAKN,UAAU,iBAAiBO,IAAKF,GAClCxB,YAAO2B,YAAQL,EAAWE,GARd,UAanB,OAAO,yBAAKL,UAAU,YAAYE,GAgF7BO,GA7EP,WAaE,IAZA,IAAMC,EAAaC,YAAahC,GAC1BiC,EAAWC,YAAWH,GACtBP,EAAYC,YAAYM,GACxBI,EAAUC,YAAUH,GAGpBI,EAAO,GAETd,EAAO,GACPjB,EAAMkB,EACNc,EAAgB,GAEbhC,GAAO6B,GAAS,CACrB,IADsB,IAAD,WACZT,GACPY,EAAgBpC,YAAOI,EATR,KAUf,IAAMiC,EAAWjC,EAEjBiB,EAAKI,KACH,yBACEN,UAAS,mBACNmB,YAAYlC,EAAKyB,GAEd5B,EAAaM,QAAQP,YAAOqC,EAAS,gBAAkB,EAAI,WAAa,GADxE,YAGNX,IAAKtB,EACLgB,QAAS,kBAAMjB,EAAYkC,KAE3B,0BAAMlB,UAAU,UAAUiB,GAC1B,0BAAMjB,UAAU,MAAMiB,KAI1BhC,EAAMuB,YAAQvB,EAAK,IAnBZoB,EAAI,EAAGA,EAAI,EAAGA,IAAM,IAqB7BW,EAAKV,KACH,yBAAKN,UAAU,MAAMO,IAAKtB,GACvBiB,IAGLA,EAAO,GAIT,OADAkB,QAAQC,IAAIvC,GACL,yBAAKkB,UAAU,QAAQgB,GAkCzBM,KCtHMC,MARf,WACE,OACE,yBAAKvB,UAAU,OACb,kBAAC,EAAD,QCKcwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.976f3b80.chunk.js","sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport ls from \"local-storage\"\nimport {format, startOfWeek, endOfWeek, addDays, addMonths, subMonths, startOfMonth, endOfMonth, isSameMonth} from \"date-fns\";\n\nfunction Calendar() {\n    const [currentMonth, setCurrentMonth] = useState(new Date())\n    const [selectedDate, setSelectedDate] = useState([format(new Date(), 'MM/dd/yyyy')])\n\n  useEffect(() => {\n    setSelectedDate(\n      ls.get('selectedDate') || [format(new Date(), 'MM/dd/yyyy')] \n    )\n  },[])\n\n  function renderHeader() {\n    const dateFormat = \"MMMM yyyy\";\n\n    return (\n      <div className=\"header row flex-middle\">\n        <div className=\"col col-start\">\n          <div className=\"icon\" onClick={prevMonth}>\n            chevron_left\n          </div>\n        </div>\n        <div className=\"col col-center\">\n          <span>{format(currentMonth, dateFormat)}</span>\n          <p>Red Meat Tracker</p>\n        </div>\n        <div className=\"col col-end\" onClick={nextMonth}>\n          <div className=\"icon\">chevron_right</div>\n        </div>\n      </div>\n    );\n  }\n\n  function renderDays() {\n    const dateFormat = \"iiii\";\n    const days = [];\n\n    let startDate = startOfWeek(currentMonth);\n\n    for (let i = 0; i < 7; i++) {\n      days.push(\n        <div className=\"col col-center\" key={i}>\n          {format(addDays(startDate, i), dateFormat)}\n        </div>\n      );\n    }\n\n    return <div className=\"days row\">{days}</div>;\n  }\n\n  function renderCells() {\n    const monthStart = startOfMonth(currentMonth);\n    const monthEnd = endOfMonth(monthStart);\n    const startDate = startOfWeek(monthStart);\n    const endDate = endOfWeek(monthEnd);\n\n    const dateFormat = \"d\";\n    const rows = [];\n\n    let days = [];\n    let day = startDate;\n    let formattedDate = \"\";\n\n    while (day <= endDate) {\n      for (let i = 0; i < 7; i++) {\n        formattedDate = format(day, dateFormat);\n        const cloneDay = day;\n\n        days.push(\n          <div\n            className={`col cell ${\n              !isSameMonth(day, monthStart)\n                ? \"disabled\"\n                : selectedDate.indexOf(format(cloneDay,'MM/dd/yyyy')) >= 0 ? \"selected\" : \"\" //isSameDay(day, selectedDate) ? \"selected\" : \"\"\n            }`}\n            key={day}\n            onClick={() => onDateClick(cloneDay)}\n          >\n            <span className=\"number\">{formattedDate}</span>\n            <span className=\"bg\">{formattedDate}</span>\n          </div>\n        );\n\n        day = addDays(day, 1);\n      }\n      rows.push(\n        <div className=\"row\" key={day}>\n          {days}\n        </div>\n      );\n      days = [];\n    }\n\n    console.log(selectedDate)\n    return <div className=\"body\">{rows}</div>;\n  }\n\n  function onDateClick(day) {\n    let clickedDate = format(day, 'MM/dd/yyyy')\n    setSelectedDate(prevDates => {\n        let dateLoc = prevDates.indexOf(clickedDate)\n        if (dateLoc < 0) {\n          return [...prevDates, clickedDate]\n        } else {\n          return [...prevDates].filter(\n            (d) => d !== clickedDate\n          )\n        }\n      })\n    ls.set('selectedDate', [...selectedDate, clickedDate])\n  };\n\n  function nextMonth() {\n      setCurrentMonth(currMonth => {\n        return addMonths(currMonth, 1);\n      })\n  };\n\n  function prevMonth() {\n    setCurrentMonth(currMonth => {\n      return subMonths(currMonth, 1);\n    })\n  };\n\n    return (\n      <div className=\"calendar\">\n        {renderHeader()}\n        {renderDays()}\n        {renderCells()}\n        \n      </div>\n    );\n  \n}\n\nexport default Calendar;","import React from 'react';\nimport './App.css';\nimport Calendar from './SimpleCalendarFunc'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Calendar />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}